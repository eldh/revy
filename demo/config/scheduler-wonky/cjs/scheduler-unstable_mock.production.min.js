/** @license React vundefined
 * scheduler-unstable_mock.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';
Object.defineProperty(exports, '__esModule', { value: !0 });
var c = 0,
  f = null,
  g = -1,
  h = null,
  k = -1,
  l = !1,
  m = !1;
function n() {
  return (-1 !== k && null !== h && h.length >= k) || (-1 !== g && g <= c)
    ? (l = !0)
    : !1;
}
function q() {
  if (m) throw Error('Already flushing work.');
  if (null !== f) {
    var a = f;
    f = null;
    m = !0;
    try {
      a(!0);
    } finally {
      m = !1;
    }
  }
}
function t() {
  if (m) throw Error('Already flushing work.');
  m = !0;
  try {
    if (null === f) return !1;
    for (; null !== f; ) {
      var a = f;
      f = null;
      a(-1 !== g && g <= c);
    }
    return !0;
  } finally {
    (k = -1), (m = l = !1);
  }
}
var u = null,
  v = !1,
  w = 3,
  x = -1,
  y = -1,
  z = !1,
  A = !1;
function B() {
  if (!z && null !== u) {
    var a = u.expirationTime;
    A ? ((f = null), (g = -1)) : (A = !0);
    f = C;
    g = a;
  }
}
function D() {
  var a = u,
    d = u.next;
  if (u === d) u = null;
  else {
    var b = u.previous;
    u = b.next = d;
    d.previous = b;
  }
  a.next = a.previous = null;
  b = a.callback;
  d = a.expirationTime;
  a = a.priorityLevel;
  var e = w,
    r = y;
  w = a;
  y = d;
  try {
    var p = b(v || 1 === a);
  } catch (E) {
    throw E;
  } finally {
    (w = e), (y = r);
  }
  if ('function' === typeof p)
    if (
      ((p = {
        callback: p,
        priorityLevel: a,
        expirationTime: d,
        next: null,
        previous: null,
      }),
      null === u)
    )
      u = p.next = p.previous = p;
    else {
      b = null;
      a = u;
      do {
        if (a.expirationTime >= d) {
          b = a;
          break;
        }
        a = a.next;
      } while (a !== u);
      null === b ? (b = u) : b === u && ((u = p), B());
      d = b.previous;
      d.next = b.previous = p;
      p.next = b;
      p.previous = d;
    }
}
function C(a) {
  A = !1;
  z = !0;
  var d = v;
  v = a;
  try {
    if (a)
      for (; null !== u; )
        if (((a = c), u.expirationTime <= a)) {
          do D();
          while (null !== u && u.expirationTime <= a);
        } else break;
    else if (null !== u) {
      do D();
      while (null !== u && !n());
    }
  } finally {
    (z = !1), (v = d), B();
  }
}
exports.unstable_flushWithoutYielding = t;
exports.unstable_flushNumberOfYields = function(a) {
  if (m) throw Error('Already flushing work.');
  k = a;
  m = !0;
  try {
    for (; null !== f && !l; ) (a = f), (f = null), a(-1 !== g && g <= c);
  } finally {
    (k = -1), (m = l = !1);
  }
};
exports.unstable_flushExpired = q;
exports.unstable_clearYields = function() {
  if (null === h) return [];
  var a = h;
  h = null;
  return a;
};
exports.flushAll = function() {
  if (null !== h)
    throw Error(
      'Log is not empty. Assert on the log of yielded values before flushing additional work.'
    );
  t();
  if (null !== h)
    throw Error(
      'While flushing work, something yielded a value. Use an assertion helper to assert on the log of yielded values, e.g. expect(Scheduler).toFlushAndYield([...])'
    );
};
exports.yieldValue = function(a) {
  null === h ? (h = [a]) : h.push(a);
};
exports.advanceTime = function(a) {
  c += a;
  !m && -1 !== g && g <= c && q();
};
exports.unstable_ImmediatePriority = 1;
exports.unstable_UserBlockingPriority = 2;
exports.unstable_NormalPriority = 3;
exports.unstable_IdlePriority = 5;
exports.unstable_LowPriority = 4;
exports.unstable_runWithPriority = function(a, d) {
  switch (a) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    default:
      a = 3;
  }
  var b = w,
    e = x;
  w = a;
  x = c;
  try {
    return d();
  } catch (r) {
    throw (B(), r);
  } finally {
    (w = b), (x = e);
  }
};
exports.unstable_next = function(a) {
  switch (w) {
    case 1:
    case 2:
    case 3:
      var d = 3;
      break;
    default:
      d = w;
  }
  var b = w,
    e = x;
  w = d;
  x = c;
  try {
    return a();
  } catch (r) {
    throw (B(), r);
  } finally {
    (w = b), (x = e);
  }
};
exports.unstable_scheduleCallback = function(a, d, b) {
  var e = -1 !== x ? x : c;
  if ('object' === typeof b && null !== b && 'number' === typeof b.timeout)
    b = e + b.timeout;
  else
    switch (a) {
      case 1:
        b = e + -1;
        break;
      case 2:
        b = e + 250;
        break;
      case 5:
        b = e + 1073741823;
        break;
      case 4:
        b = e + 1e4;
        break;
      default:
        b = e + 5e3;
    }
  a = {
    callback: d,
    priorityLevel: a,
    expirationTime: b,
    next: null,
    previous: null,
  };
  if (null === u) (u = a.next = a.previous = a), B();
  else {
    d = null;
    e = u;
    do {
      if (e.expirationTime > b) {
        d = e;
        break;
      }
      e = e.next;
    } while (e !== u);
    null === d ? (d = u) : d === u && ((u = a), B());
    b = d.previous;
    b.next = d.previous = a;
    a.next = d;
    a.previous = b;
  }
  return a;
};
exports.unstable_cancelCallback = function(a) {
  var d = a.next;
  if (null !== d) {
    if (d === a) u = null;
    else {
      a === u && (u = d);
      var b = a.previous;
      b.next = d;
      d.previous = b;
    }
    a.next = a.previous = null;
  }
};
exports.unstable_wrapCallback = function(a) {
  var d = w;
  return function() {
    var b = w,
      e = x;
    w = d;
    x = c;
    try {
      return a.apply(this, arguments);
    } catch (r) {
      throw (B(), r);
    } finally {
      (w = b), (x = e);
    }
  };
};
exports.unstable_getCurrentPriorityLevel = function() {
  return w;
};
exports.unstable_shouldYield = function() {
  return !v && ((null !== u && u.expirationTime < y) || n());
};
exports.unstable_continueExecution = function() {
  null !== u && B();
};
exports.unstable_pauseExecution = function() {};
exports.unstable_getFirstCallbackNode = function() {
  return u;
};
exports.unstable_now = function() {
  return c;
};
exports.unstable_forceFrameRate = function() {};
