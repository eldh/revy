/** @license React vundefined
 * react-fresh-babel.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';
function u(A) {
  function q(a, b) {
    var d = a.scope.generateUidIdentifier('c');
    l.has(a) || l.set(a, []);
    l.get(a).push({ handle: d, persistentID: b });
    return d;
  }
  function r(a) {
    return 'string' === typeof a && 'A' <= a[0] && 'Z' >= a[0];
  }
  function m(a, b, d) {
    var c = b.node;
    switch (c.type) {
      case 'Identifier':
        if (!r(c.name)) break;
        d(a, c, null);
        return !0;
      case 'FunctionDeclaration':
        return d(a, c.id, null), !0;
      case 'ArrowFunctionExpression':
        if ('ArrowFunctionExpression' === c.body.type) break;
        d(a, c, b);
        return !0;
      case 'FunctionExpression':
        return d(a, c, b), !0;
      case 'CallExpression':
        var e = b.get('arguments');
        if (void 0 === e || 0 === e.length) break;
        var g = b.get('callee');
        switch (g.node.type) {
          case 'MemberExpression':
          case 'Identifier':
            g = g.getSource();
            if (!m(a + '$' + g, e[0], d)) return !1;
            d(a, c, b);
            return !0;
          default:
            return !1;
        }
      case 'VariableDeclarator':
        if (
          ((e = c.init),
          null !== e &&
            ((g = c.id.name),
            r(g) && 'Identifier' !== e.type && 'MemberExpression' !== e.type))
        ) {
          c = b.get('init');
          if (m(a, c, d)) return !0;
          g = b.scope.getBinding(g);
          if (void 0 === g) return;
          b = !1;
          g = g.referencePaths;
          for (var f = 0; f < g.length; f++) {
            var h = g[f];
            if (
              'JSXIdentifier' === h.node.type ||
              'Identifier' === h.node.type
            ) {
              h = h.parent;
              if ('JSXOpeningElement' === h.type) b = !0;
              else if ('CallExpression' === h.type) {
                h = h.callee;
                var k = void 0;
                switch (h.type) {
                  case 'Identifier':
                    k = h.name;
                    break;
                  case 'MemberExpression':
                    k = h.property.name;
                }
                switch (k) {
                  case 'createElement':
                  case 'jsx':
                  case 'jsxDEV':
                  case 'jsxs':
                    b = !0;
                }
              }
              if (b) return d(a, e, c), !0;
            }
          }
        }
    }
    return !1;
  }
  function v(a) {
    a = n.get(a);
    return void 0 === a
      ? null
      : {
          key: a
            .map(function(a) {
              return a.name + '{' + a.key + '}';
            })
            .join('\n'),
          customHooks: a
            .filter(function(a) {
              a: switch (a.name) {
                case 'useState':
                case 'React.useState':
                case 'useReducer':
                case 'React.useReducer':
                case 'useEffect':
                case 'React.useEffect':
                case 'useLayoutEffect':
                case 'React.useLayoutEffect':
                case 'useMemo':
                case 'React.useMemo':
                case 'useCallback':
                case 'React.useCallback':
                case 'useRef':
                case 'React.useRef':
                case 'useContext':
                case 'React.useContext':
                case 'useImperativeMethods':
                case 'React.useImperativeMethods':
                case 'useDebugValue':
                case 'React.useDebugValue':
                  a = !0;
                  break a;
                default:
                  a = !1;
              }
              return !a;
            })
            .map(function(a) {
              return a.callee;
            }),
        };
  }
  function B(a) {
    a = a.hub.file;
    var b = w.get(a);
    if (void 0 !== b) return b;
    b = !1;
    for (var d = a.ast.comments, c = 0; c < d.length; c++)
      if (-1 !== d[c].value.indexOf('@hot reset')) {
        b = !0;
        break;
      }
    w.set(a, b);
    return b;
  }
  function t(a, b, d) {
    var c = b.key;
    b = b.customHooks;
    var e = B(d.path),
      g = [];
    b.forEach(function(a) {
      var b = void 0;
      switch (a.type) {
        case 'MemberExpression':
          'Identifier' === a.object.type && (b = a.object.name);
          break;
        case 'Identifier':
          b = a.name;
      }
      d.hasBinding(b) ? g.push(a) : (e = !0);
    });
    a = [a, f.stringLiteral(c)];
    (e || 0 < g.length) && a.push(f.booleanLiteral(e));
    0 < g.length && a.push(f.arrowFunctionExpression([], f.arrayExpression(g)));
    return a;
  }
  var f = A.types,
    l = new Map(),
    w = new WeakMap(),
    k = new WeakSet(),
    p = new WeakSet(),
    x = new WeakSet(),
    n = new WeakMap(),
    C = {
      CallExpression: function(a) {
        var b = a.node.callee,
          d = null;
        switch (b.type) {
          case 'Identifier':
            d = b.name;
            break;
          case 'MemberExpression':
            d = b.property.name;
        }
        if (
          null !== d &&
          /^use[A-Z]/.test(d) &&
          ((b = a.scope.getFunctionParent()), null !== b)
        ) {
          b = b.block;
          n.has(b) || n.set(b, []);
          b = n.get(b);
          var c = '';
          'VariableDeclarator' === a.parent.type &&
            (c = a.parentPath.get('id').getSource());
          var e = a.get('arguments');
          'useState' === d && 0 < e.length
            ? (c += '(' + e[0].getSource() + ')')
            : 'useReducer' === d &&
              1 < e.length &&
              (c += '(' + e[1].getSource() + ')');
          b.push({ callee: a.node.callee, name: d, key: c });
        }
      },
    };
  return {
    visitor: {
      ExportDefaultDeclaration: function(a) {
        var b = a.node,
          d = b.declaration,
          c = a.get('declaration');
        if ('CallExpression' === d.type && !k.has(b)) {
          k.add(b);
          var e = a.parentPath;
          m('%default%', c, function(a, b, c) {
            null !== c &&
              ((a = q(e, a)), c.replaceWith(f.assignmentExpression('=', a, b)));
          });
        }
      },
      FunctionDeclaration: {
        enter: function(a) {
          var b = a.node,
            d = void 0,
            c = void 0;
          switch (a.parent.type) {
            case 'Program':
              c = a;
              d = a.parentPath;
              break;
            case 'ExportNamedDeclaration':
              c = a.parentPath;
              d = c.parentPath;
              break;
            case 'ExportDefaultDeclaration':
              c = a.parentPath;
              d = c.parentPath;
              break;
            default:
              return;
          }
          var e = b.id;
          null !== e &&
            ((e = e.name),
            r(e) &&
              !k.has(b) &&
              (k.add(b),
              m(e, a, function(a, b) {
                a = q(d, a);
                c.insertAfter(
                  f.expressionStatement(f.assignmentExpression('=', a, b))
                );
              })));
        },
        exit: function(a) {
          var b = a.node,
            d = b.id;
          if (null !== d) {
            var c = v(b);
            if (null !== c && !p.has(b)) {
              p.add(b);
              b = a.scope.generateUidIdentifier('_s');
              a.scope.parent.push({
                id: b,
                init: f.callExpression(f.identifier('__signature__'), []),
              });
              a.get('body').unshiftContainer(
                'body',
                f.expressionStatement(f.callExpression(b, []))
              );
              var e = null;
              a.find(function(a) {
                if (a.parentPath.isBlock()) return (e = a), !0;
              });
              null !== e &&
                e.insertAfter(
                  f.expressionStatement(f.callExpression(b, t(d, c, e.scope)))
                );
            }
          }
        },
      },
      'ArrowFunctionExpression|FunctionExpression': {
        exit: function(a) {
          var b = a.node,
            d = v(b);
          if (null !== d && !p.has(b)) {
            p.add(b);
            var c = a.scope.generateUidIdentifier('_s');
            a.scope.parent.push({
              id: c,
              init: f.callExpression(f.identifier('__signature__'), []),
            });
            a.get('body').unshiftContainer(
              'body',
              f.expressionStatement(f.callExpression(c, []))
            );
            if ('VariableDeclarator' === a.parent.type) {
              var e = null;
              a.find(function(a) {
                if (a.parentPath.isBlock()) return (e = a), !0;
              });
              null !== e &&
                e.insertAfter(
                  f.expressionStatement(
                    f.callExpression(c, t(a.parent.id, d, e.scope))
                  )
                );
            } else a.replaceWith(f.callExpression(c, t(b, d, a.scope)));
          }
        },
      },
      VariableDeclaration: function(a) {
        var b = a.node,
          d = void 0,
          c = void 0;
        switch (a.parent.type) {
          case 'Program':
            c = a;
            d = a.parentPath;
            break;
          case 'ExportNamedDeclaration':
            c = a.parentPath;
            d = c.parentPath;
            break;
          case 'ExportDefaultDeclaration':
            c = a.parentPath;
            d = c.parentPath;
            break;
          default:
            return;
        }
        if (
          !k.has(b) &&
          (k.add(b), (a = a.get('declarations')), 1 === a.length)
        ) {
          var e = a[0];
          m(e.node.id.name, e, function(a, b, h) {
            null !== h &&
              ((a = q(d, a)),
              ('ArrowFunctionExpression' !== b.type &&
                'FunctionExpression' !== b.type) ||
              'VariableDeclarator' !== h.parent.type
                ? h.replaceWith(f.assignmentExpression('=', a, b))
                : c.insertAfter(
                    f.expressionStatement(
                      f.assignmentExpression('=', a, e.node.id)
                    )
                  ));
          });
        }
      },
      Program: {
        enter: function(a) {
          a.traverse(C);
        },
        exit: function(a) {
          var b = l.get(a);
          if (void 0 !== b) {
            var d = a.node;
            if (!x.has(d)) {
              x.add(d);
              l.delete(a);
              var c = [];
              a.pushContainer('body', f.variableDeclaration('var', c));
              b.forEach(function(b) {
                var d = b.handle;
                b = b.persistentID;
                a.pushContainer(
                  'body',
                  f.expressionStatement(
                    f.callExpression(f.identifier('__register__'), [
                      d,
                      f.stringLiteral(b),
                    ])
                  )
                );
                c.push(f.variableDeclarator(d));
              });
            }
          }
        },
      },
    },
  };
}
var y = { default: u },
  z = (y && u) || y;
module.exports = z.default || z;
